#	                                    __
#	______   _________________   _____/  |_ __ _______
#	\____ \_/ __ \_  __ \____ \_/ __ \   __\  |  \__  \
#	|  |_> >  ___/|  | \/  |_> >  ___/|  | |  |  // __ \_
#	|   __/ \___  >__|  |   __/ \___  >__| |____/(____  /
#	|__|        \/      |__|        \/                \/
#
# Notice
#   perpetua 固定连接第一个 ForwardWebSocket 配置项

# 日志项配置
log:
  # 是否每次启动新建log文件
  force-new: false
  # 日志等级
  #   trace debug info warn error
  level: "debug"
  # 日志存活时间，到期新建log文件
  aging: 24h
  # 是否开启控制台颜色
  colorful: true

ntqq-impl:
  # 外置 onebot-11 实现的正向 ws 地址
  # 手动指定 ntqq 实现的正向 ws 地址（docker 部署或连接到外置NTQQ实现时使用）
  # 若检测不到，则自动开始加载内置 NTQQ 逻辑
  external-web-socket: "ws://127.0.0.1:5700/onebot/v11/ws"
  # 外置 onebot-11 实现的 AccessToken
  # 仅在配置了 external-web-socket 时生效
  external-access-token: ""
  # 以下配置项除 enable 外自动更新，无需手动变动
  update:
    enable: false
    id: 0
    platform: ""
    updated-at: "0001-01-01T00:00:00Z"

# http 相关配置
http:
  # 监听端口
  port: 8080

# websocket 相关配置
web-socket:
  # ws监听最长等待时间
  timeout: 15s
  # 指定范围 [start, end] 内随机监听端口
  range-port:
    # 是否开启功能
    enabled: false
    # 起始端口
    start: 8100
    # 终止端口
    end: 8110

# 反向 websocket 相关配置
# 注：是由 perpetua 主动向上报地址发起反向 ws 连接
# 使用场景举例：perpetua 在启动后主动连接到 nonebot
reverse-web-socket:
    # 上报地址
  - url: ''
    # AccessToken
    access-token: ''

# http post 相关配置
# 注：是由 perpetua 主动向上报地址上报事件
http-post:
    # 上报地址
  - url: ''
    # HMAC 签名密匙
    secret: ''

# 接收消息的最大缓存时间
msg-expire-time: 30m
